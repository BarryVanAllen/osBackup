#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/wait.h>
#include <time.h>

#define NB_PILOTES 20
#define NB_TOURS 20

// Structure pour représenter un pilote
typedef struct {
    char nom[50];
    float temps_meilleur_tour;
    int position_grille;
    int distance_parcourue; // Nouvelle variable pour la simulation parallèle
} Pilote;

void initialiser_pilotes(Pilote pilotes[]);
float generer_temps_tour(float base_temps, int difficulte);
void simulations_essais_libres(Pilote pilotes[], char* type_session);
void afficher_resultats(Pilote pilotes[], char* titre);

int main() {
    srand(time(NULL));

    Pilote pilotes[NB_PILOTES];
    initialiser_pilotes(pilotes);

    printf("--- Essais Libre 1 ---\n");
    simulations_essais_libres(pilotes, "Essais Libres 1");

    printf("\n--- Essais Libres 2 ---\n");
    simulations_essais_libres(pilotes, "Essais Libres 2");

    printf("\n--- Essais Libres 3 ---\n");
    simulations_essais_libres(pilotes, "Essais Libres 3");

    return 0;
}

void initialiser_pilotes(Pilote pilotes[]) {
    const char* noms_pilotes[] = {
        "Verstappen", "Hamilton", "Pérez", "Russell", "Sainz",
        "Leclerc", "Norris", "Piastri", "Ocon", "Gasly",
        "Alonso", "Stroll", "Bottas", "Zhou", "Magnussen",
        "Sargeant", "Ricciardo", "De Vries", "Tsunoda", "Sargent"
    };

    for (int i = 0; i < NB_PILOTES; i++) {
        strcpy(pilotes[i].nom, noms_pilotes[i]);
        pilotes[i].temps_meilleur_tour = 0.0;
        pilotes[i].position_grille = 0;
        pilotes[i].distance_parcourue = 0;
    }
}

float generer_temps_tour(float base_temps, int difficulte) {
    float variation = (rand() % 500) / 1000.0;  // Variation jusqu'à 0.5 seconde
    float coefficient_difficulte = 1.0 + (difficulte * 0.01);
    return base_temps * coefficient_difficulte + variation;
}

void simulations_essais_libres(Pilote pilotes[], char* type_session) {
    for (int i = 0; i < NB_PILOTES; i++) {
        pilotes[i].temps_meilleur_tour = generer_temps_tour(80.0, rand() % 10);
    }

    // Tri des pilotes par temps
    for (int i = 0; i < NB_PILOTES - 1; i++) {
        for (int j = 0; j < NB_PILOTES - i - 1; j++) {
            if (pilotes[j].temps_meilleur_tour > pilotes[j + 1].temps_meilleur_tour) {
                Pilote temp = pilotes[j];
                pilotes[j] = pilotes[j + 1];
                pilotes[j + 1] = temp;
            }
        }
    }

    afficher_resultats(pilotes, type_session);
}

void afficher_resultats(Pilote pilotes[], char* titre) {
    printf("\n%s\n", titre);
    for (int i = 0; i < NB_PILOTES; i++) {
        printf("%d. %s : %.3f s\n", i + 1, pilotes[i].nom, pilotes[i].temps_meilleur_tour);
    }
}
